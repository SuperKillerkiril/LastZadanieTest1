@page "/product/{id:int}"
@using UrbanMuse.DataBase
@using UrbanMuse.Models
@inject ModelContext ef
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@if (msg != null)
{
    <div class="product-demo-message">
        <a>@msg</a>
    </div>
    Timer();
}
@if (IsMenuOpen)
{
    <div class="product-demo-menu">
        <button>home</button>
        <button>home</button>
        <button>home</button>
    </div>
}

<div class="product-demo-header-right">
    <div class="store-header-logo-text">
        <img class="store-header-img" src="LocalImage/IconAndGroup/amphora.svg">
        <NavLink class="nav-link" href="about">
            URBAN MUSE
        </NavLink>
    </div>
</div>

<div class="product-demo-header-left">
    <button @onclick="NavigateToRegistred"><img src="LocalImage/IconAndGroup/log-in.svg"/></button>
    <button ><img src="LocalImage/IconAndGroup/shopping-basket.svg"/></button>
    <button @onclick="OpenMenu"><img src="LocalImage/IconDemo/menu.svg"/></button>
</div>



<div class="product-demo-background">
    <div class="product-demo-card-container">
        <div class="product-demo-card">
            <button @onclick="Previous"><img src="LocalImage/IconDemo/chevron-left.svg"/></button>
            <img class="product-demo-card-img" src="@_product.Image[currentimg]"/>
            <button @onclick="Next"><img src="LocalImage/IconDemo/chevron-left.png"/></button>
        </div>
    </div>
    <div class="product-demo-card-more">
        @foreach (var img in _product.Image)
        {
            <img @onclick="() => currentimgSet(img)" src="@img"/>
        }
    </div>
    <div class="product-demo-card-name">@_product.Name</div>
    <div class="product-demo-card-price">@_product.Price$</div>
    <div class="product-demo-card-buy-container">
        <button class="product-demo-card-buy-container-button" @onclick="() => CurrentSize(1)">S</button>
        <button class="product-demo-card-buy-container-button"  @onclick="() => CurrentSize(2)">M</button>
        <button class="product-demo-card-buy-container-button"  @onclick="() => CurrentSize(3)">L</button>
        <button class="product-demo-card-buy-container-button"  @onclick="() => CurrentSize(4)">XL</button>
        <button class="product-demo-card-buy" @onclick="CreateOrder">Buy</button>
    </div>
</div>





<div class="product-demo-louer">
    <div class="product-demo-louer-description-upper">@_product.Name, what's the point?</div>
    <div class="product-demo-louer-description">@_product.Description</div>
    
    <div class="product-demo-recommendations-carousel">
        @foreach (var prod in _products)
        {
            <div class="product-demo-recommendations-card">
                <img src="@prod.Image[0]"/>
                <div class="store-product-card-description">
                    <div class="product-demo-recommendations-text">@prod.Name</div>
                    <div class="product-demo-recommendations-text">@prod.Price$</div>
                </div>
            </div>
        }
    </div>
    <div class="product-demo-desc-hr"></div>
    <div class="product-demo-desc">
        <button>I luuuuf i luf i luf i u</button>
        <a>URBAN MUSE</a><img class="store-header-img" src="LocalImage/IconAndGroup/amphora.svg"/>
    </div>
</div>




@code {
    [Parameter] public int id { get; set; }
    private int ClientId { get; set; }
    private Product _product = new Product();
    private Client _client = new Client();
    private Order _order = new Order();
    private List<Product> _products = new List<Product>();
    private int currentSize = 2;
    private int currentimg;
    private string? msg = null;
    private bool IsAuth = false;
    private bool IsMenuOpen = false;

    protected void OpenMenu()
    {
        IsMenuOpen = !IsMenuOpen;
        StateHasChanged();
    }

    private void currentimgSet(string imge)
    {
        currentimg = _product.Image.Where(img => img == imge).Count();
    }

    protected override async void OnInitialized()
    {
        LoadProduct();
        IsAuth = await LocalStorage.GetItemAsync<bool>("IsAuth");
    }
    private void CurrentSize(int size)
    { currentSize = size; }

    private void Next()
    { currentimg = (currentimg + 1) % _product.Image.Count; }
    private void Previous()
    { currentimg = (currentimg - 1 + _product.Image.Count) % _product.Image.Count; }

    private void LoadProduct()
    { _product = ef.Products.FirstOrDefault(p => p.Id == id)!; _products = ef.Products.ToList(); }

    public void NavigateToRegistred()
    { NavigationManager.NavigateTo("/registered"); }
    public void NavigateToNew()
    { NavigationManager.NavigateTo("/New"); }

    private async void Timer()
    { await Task.Delay(2000); msg = null; StateHasChanged(); }

    private async void  CreateOrder()
    {
        if (!IsAuth)
        {
            msg = "you are not logged in"; /*ДОБ. ОКНО ВЫВОДА СООБЩЕНИЯ*/
        }
        else
        {
            try
            {
                ClientId = await LocalStorage.GetItemAsync<int>("clientId");
                
                _order.OrderDate = DateTime.Now;
                
                _order.ClientId = ClientId;
                _order.Client = ef.Clients.FirstOrDefault(c => c.Id == ClientId);
                
                _product.Size = currentSize;
                _order.ProductId = _product.Id;
                _order.Product = ef.Products.FirstOrDefault(p => p.Id == id);
                
                ef.Add(_order);
                ef.SaveChanges();
                msg = $"the order has been successfully created, the size {_product.Size}, the name {_product.Name}, all orders can be viewed in the shopping cart";
                _order = null!;
                _product = null!;
            }
            catch (Exception e)
            {
                msg = e.Message;
            }
        }
    }
}